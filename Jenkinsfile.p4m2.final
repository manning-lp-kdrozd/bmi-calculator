pipeline {
    agent any

    stages {      
        stage('Test') { 
            agent {
                docker {
                    image 'node:16.13.1-alpine'            
                }
            }
            steps {
                sh 'CI=true npm test' 
            }
        }
        stage('Quality Test') {
            agent {
                docker {
                    image 'node:16.13.1-alpine'            
                }
            }
            steps {
                sh 'CI=true npm test -- --coverage'
                publishCoverage(
                    adapters: [
                        cobertura(coberturaReportFile: 'coverage/cobertura-coverage.xml')
                    ],
                    sourceFileResolver: sourceFiles('STORE_ALL_BUILD'),
                    globalThresholds: [
                        [
                            thresholdTarget: 'Line',
                            unhealthyThreshold: 70.0,
                            unstableThreshold: 70.0
                        ]
                    ]
                )
            }
         
        }
        stage('Static Code Analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:latest'
                    args "--entrypoint=''"
                }   
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'sonar-scanner'
                }
                timeout(unit: 'SECONDS', time: 600) {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build') {
            agent {
                docker { image 'node:16.13.1-alpine' }
            }
            steps {
                sh 'node --version'
                sh 'CI=true npm install'
                sh 'CI=true npm run build'
            }
            post {
                success {
                    echo 'Build succeeded!'
                    zip zipFile: 'build.zip', archive: false, dir: 'build', overwrite: true
                    stash name: 'mybmicalc', allowEmpty: false, includes: 'build.zip'
                    // disabled - too much noise
                    slackSend channel: '#kdmicalcpipeline', color: 'good', message: "bmi calc artifacts stashed :)"
                }
            }
        }
        stage('Docker image') { 
            steps {

                // some block, this should use public DockerHub by default
                script{
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                        unstash 'mybmicalc'
                        unzip dir: 'build', glob: '', zipFile: 'build.zip'
                        docker.build('krzysiekdrozd/bmicalc').push('latest')
                    }
                }
            } 
        }
        stage('Scan with Trivy') {
            agent {
                docker {
                    image 'aquasec/trivy:latest'
                    args "--entrypoint=''"
                }
            }           
            steps {
                sh 'trivy --cache-dir=/tmp/ image --format=json --output=./results.json krzysiekdrozd/bmicalc:latest'
                recordIssues(tools: [trivy(pattern: '**/results.json')])
            }
        }
        stage('Deploy on microk8s') {
            steps {
                kubernetesDeploy configs: 'kube/**', kubeConfig: [path: ''], kubeconfigId: 'local_micro-kubeconfig', secretName: '', ssh: [sshCredentialsId: '*', sshServer: ''], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://']
            }
        }

        stage('Performance testing with JMeter') {
            agent {
                docker {
                    image 'pedrocesarti/jmeter-docker'
                    args '--entrypoint=""'
                }
            }
            steps {
                sh 'jmeter -n -t ./bmicalcperftest.jmx  -l ./jmeterlog.jtl'
                
                perfReport filterRegex: '', showTrendGraphs: true, sourceDataFiles: '**/*.jtl'
            }
        }
    }
}
